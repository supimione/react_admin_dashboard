{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BestFitMatcher = void 0;\n\nvar BestAvailableLocale_1 = require(\"./BestAvailableLocale\");\n\nvar utils_1 = require(\"./utils\");\n/**\n * https://tc39.es/ecma402/#sec-bestfitmatcher\n * @param availableLocales\n * @param requestedLocales\n * @param getDefaultLocale\n */\n\n\nfunction BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {\n  var minimizedAvailableLocaleMap = {};\n  var availableLocaleMap = {};\n  var canonicalizedLocaleMap = {};\n  var minimizedAvailableLocales = new Set();\n  availableLocales.forEach(function (locale) {\n    var minimizedLocale = new Intl.Locale(locale).minimize().toString();\n    var canonicalizedLocale = Intl.getCanonicalLocales(locale)[0] || locale;\n    minimizedAvailableLocaleMap[minimizedLocale] = locale;\n    availableLocaleMap[locale] = locale;\n    canonicalizedLocaleMap[canonicalizedLocale] = locale;\n    minimizedAvailableLocales.add(minimizedLocale);\n    minimizedAvailableLocales.add(locale);\n    minimizedAvailableLocales.add(canonicalizedLocale);\n  });\n  var foundLocale;\n\n  for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {\n    var l = requestedLocales_1[_i];\n\n    if (foundLocale) {\n      break;\n    }\n\n    var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');\n\n    if (availableLocales.has(noExtensionLocale)) {\n      foundLocale = noExtensionLocale;\n      break;\n    }\n\n    if (minimizedAvailableLocales.has(noExtensionLocale)) {\n      foundLocale = noExtensionLocale;\n      break;\n    }\n\n    var locale = new Intl.Locale(noExtensionLocale);\n    var maximizedRequestedLocale = locale.maximize().toString();\n    var minimizedRequestedLocale = locale.minimize().toString(); // Check minimized locale\n\n    if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {\n      foundLocale = minimizedRequestedLocale;\n      break;\n    } // Lookup algo on maximized locale\n\n\n    foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);\n  }\n\n  if (!foundLocale) {\n    return {\n      locale: getDefaultLocale()\n    };\n  }\n\n  return {\n    locale: availableLocaleMap[foundLocale] || canonicalizedLocaleMap[foundLocale] || minimizedAvailableLocaleMap[foundLocale] || foundLocale\n  };\n}\n\nexports.BestFitMatcher = BestFitMatcher;","map":{"version":3,"sources":["/home/supratim/Documents/react_admin_dashboard/node_modules/@formatjs/intl-localematcher/abstract/BestFitMatcher.js"],"names":["Object","defineProperty","exports","value","BestFitMatcher","BestAvailableLocale_1","require","utils_1","availableLocales","requestedLocales","getDefaultLocale","minimizedAvailableLocaleMap","availableLocaleMap","canonicalizedLocaleMap","minimizedAvailableLocales","Set","forEach","locale","minimizedLocale","Intl","Locale","minimize","toString","canonicalizedLocale","getCanonicalLocales","add","foundLocale","_i","requestedLocales_1","length","l","noExtensionLocale","replace","UNICODE_EXTENSION_SEQUENCE_REGEX","has","maximizedRequestedLocale","maximize","minimizedRequestedLocale","BestAvailableLocale"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BestFitMatcher = void 0;\nvar BestAvailableLocale_1 = require(\"./BestAvailableLocale\");\nvar utils_1 = require(\"./utils\");\n/**\n * https://tc39.es/ecma402/#sec-bestfitmatcher\n * @param availableLocales\n * @param requestedLocales\n * @param getDefaultLocale\n */\nfunction BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {\n    var minimizedAvailableLocaleMap = {};\n    var availableLocaleMap = {};\n    var canonicalizedLocaleMap = {};\n    var minimizedAvailableLocales = new Set();\n    availableLocales.forEach(function (locale) {\n        var minimizedLocale = new Intl.Locale(locale)\n            .minimize()\n            .toString();\n        var canonicalizedLocale = Intl.getCanonicalLocales(locale)[0] || locale;\n        minimizedAvailableLocaleMap[minimizedLocale] = locale;\n        availableLocaleMap[locale] = locale;\n        canonicalizedLocaleMap[canonicalizedLocale] = locale;\n        minimizedAvailableLocales.add(minimizedLocale);\n        minimizedAvailableLocales.add(locale);\n        minimizedAvailableLocales.add(canonicalizedLocale);\n    });\n    var foundLocale;\n    for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {\n        var l = requestedLocales_1[_i];\n        if (foundLocale) {\n            break;\n        }\n        var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');\n        if (availableLocales.has(noExtensionLocale)) {\n            foundLocale = noExtensionLocale;\n            break;\n        }\n        if (minimizedAvailableLocales.has(noExtensionLocale)) {\n            foundLocale = noExtensionLocale;\n            break;\n        }\n        var locale = new Intl.Locale(noExtensionLocale);\n        var maximizedRequestedLocale = locale.maximize().toString();\n        var minimizedRequestedLocale = locale.minimize().toString();\n        // Check minimized locale\n        if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {\n            foundLocale = minimizedRequestedLocale;\n            break;\n        }\n        // Lookup algo on maximized locale\n        foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);\n    }\n    if (!foundLocale) {\n        return { locale: getDefaultLocale() };\n    }\n    return {\n        locale: availableLocaleMap[foundLocale] ||\n            canonicalizedLocaleMap[foundLocale] ||\n            minimizedAvailableLocaleMap[foundLocale] ||\n            foundLocale,\n    };\n}\nexports.BestFitMatcher = BestFitMatcher;\n"]},"metadata":{},"sourceType":"script"}